/*
1. Select all the information from the store table.

Each store has its own id, country and city. There is only one store per city in our table to make things a bit easier. Apart from that, you can see when the store was opened and what rating it has (1-5), based on customers' opinions.
*/

SELECT id, country,	city, opening_day, rating
FROM store 


/*
2. Select all the information from the sales table.

In this table, the sales results are gathered for each store from the period between August 1 and August 14 2016. You can find the id of the store, the date, and three important values: the total revenue on that day, the number of transactions and the number of customers who entered the store (but not necessarily bought anything).
*/

SELECT store_id, day, revenue, transactions, customers
FROM sales;


-- ////////////

SELECT
  country,
  city,
  rating,
  AVG(rating) OVER(PARTITION BY country)
FROM store;


/*
3. For each sales row, show the store_id, day, revenue on that day and the average revenue in that store.
*/

SELECT
  store_id,
  day,
  revenue,
  AVG(revenue) OVER(PARTITION BY store_id)
FROM sales;



/*
4. For each sales row between August 1 and August 7, 2016, show the store_id, day, number of transactions, the total number of transactions on that day in any store and the ratio of the two last columns shown as percentage rounded to integer values.
*/

SELECT
  store_id,
  day,
  transactions,
  SUM(transactions) OVER(PARTITION BY day),
  ROUND(transactions::numeric / SUM(transactions) OVER(PARTITION BY day) * 100) 
FROM sales
WHERE day BETWEEN '2016-08-01' AND '2016-08-07';


--///////////
-- the position of each store in the global network based on their ratings
SELECT
  id,
  country,
  city,
  rating,
  RANK() OVER(ORDER BY rating DESC)
FROM store;


-- // we can add PARTITION BY to calculate the positions independently for each country:
SELECT
  id,
  country,
  city,
  rating,
  RANK() OVER(PARTITION BY country ORDER BY rating DESC)
FROM store;


/*
5. Take into account the period between August 10 and August 14, 2016. For each row of sales, show the following information: store_id, day, number of customers and the rank based on the number of customers in the particular store (in descending order).
*/

SELECT
  store_id,
  day,
  customers,
  RANK() OVER(PARTITION BY store_id ORDER BY customers DESC)
FROM sales
WHERE day BETWEEN '2016-08-10' AND '2016-08-14';


/*
6. Take the sales between August 1 and August 10, 2016. For each row, show the store_id, the day, the revenue on that day and quartile number (quartile means we divide the rows into four groups) based on the revenue of the given store in the descending order.
*/

SELECT
  store_id,
  day,
  revenue,
  NTILE(4) OVER(PARTITION BY store_id ORDER BY revenue DESC)
FROM sales
WHERE day BETWEEN '2016-08-01' AND '2016-08-10';

-- ////////////////
-- The CTE in the parentheses creates a separate ranking of stores in each country based on their rating. 
-- In the outer query, we simply return the rows with the right rank. As a result, we'll see the best store in each country.
WITH ranking AS (
  SELECT
    country,
    city,
    RANK() OVER(PARTITION BY country ORDER BY rating DESC) AS rank
  FROM store
)

SELECT
  country,
  city
FROM ranking
WHERE rank = 1;


/*
7. For each store, show a row with three columns: store_id, the revenue on the best day in that store in terms of the revenue and the day when that best revenue was achieved.
*/

WITH ranking AS (
  SELECT
      store_id,
      day,
      revenue,
      RANK() OVER(PARTITION BY store_id ORDER BY revenue DESC) AS rank
  FROM sales
)

SELECT
  store_id,
  revenue,
  day
FROM ranking
WHERE rank = 1;


/*
8. Let's analyze sales data between August 1 and August 3, 2016. For each row, show store_id, day, transactions and the ranking of the store on that day in terms of the number of transactions as compared to other stores. The store with the greatest number should get 1 from a window function. Use individual row ranks even when two rows share the same value. Name the column place_no.
*/

SELECT
      store_id,
      day,
      transactions,
      ROW_NUMBER() OVER(PARTITION BY day ORDER BY transactions DESC) AS place_no
FROM sales
WHERE day BETWEEN '2016-08-01' AND '2016-08-03'


/*
9. For each day of the sales statistics, show the day, the store_id of the best store in terms of the revenue on that day, and that revenue.
*/

WITH ranking AS (
  SELECT
  	day,
      	store_id,
  	ROW_NUMBER() OVER(PARTITION BY day ORDER BY revenue DESC) rank,
      	revenue
  FROM sales
)

SELECT 
	day,
	store_id,
    	revenue
FROM ranking
WHERE rank = 1




/*
10. Divide the sales results for each store into four groups based on the number of transactions and for each store, show the rows in the group with the lowest numbers of transactions: store_id, day, transactions.
*/

WITH ranking AS (
  SELECT
  	store_id,
  	day,
    transactions,
  	NTILE(4) OVER(PARTITION BY store_id ORDER BY transactions ASC) rank  	
  FROM sales
)

SELECT 
	store_id,
  	day,
    transactions
FROM ranking
WHERE rank = 1

-- SELECT
  id,
  country,
  city,
  opening_day,
  rating,
  MAX(rating) OVER(
    PARTITION BY country
    ORDER BY opening_day
    ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
FROM store;


/*
11. Show sales statistics between August 1 and August 7, 2016. For each row, show store_id, day, revenue and the best revenue in the respective store up to that date.
*/

SELECT
      store_id,
      day,
      revenue,
      MAX(revenue) OVER(
    	PARTITION BY store_id
    	ORDER BY day
    	ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
FROM sales
WHERE day BETWEEN '2016-08-01' AND '2016-08-07'


/*
12. 
*/


/*
13. 
*/


/*
14. 
*/


/*
15. 
*/


/*
16. 
*/


/*
17. 
*/


/*
18. 
*/


/*
19. 
*/


/*
20. 
*/


/*
21. 
*/


/*
22. 
*/


/*
23. 
*/


/*
24. 
*/


/*
25. 
*/