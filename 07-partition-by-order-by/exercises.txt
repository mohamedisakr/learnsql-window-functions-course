/*
1. Select all the information from the store table.

Each store has its own id, country and city. There is only one store per city in our table to make things a bit easier. Apart from that, you can see when the store was opened and what rating it has (1-5), based on customers' opinions.
*/

SELECT id, country,	city, opening_day, rating
FROM store 


/*
2. Select all the information from the sales table.

In this table, the sales results are gathered for each store from the period between August 1 and August 14 2016. You can find the id of the store, the date, and three important values: the total revenue on that day, the number of transactions and the number of customers who entered the store (but not necessarily bought anything).
*/

SELECT store_id, day, revenue, transactions, customers
FROM sales;


-- ////////////

SELECT
  country,
  city,
  rating,
  AVG(rating) OVER(PARTITION BY country)
FROM store;


/*
3. For each sales row, show the store_id, day, revenue on that day and the average revenue in that store.
*/

SELECT
  store_id,
  day,
  revenue,
  AVG(revenue) OVER(PARTITION BY store_id)
FROM sales;



/*
4. For each sales row between August 1 and August 7, 2016, show the store_id, day, number of transactions, the total number of transactions on that day in any store and the ratio of the two last columns shown as percentage rounded to integer values.
*/

SELECT
  store_id,
  day,
  transactions,
  SUM(transactions) OVER(PARTITION BY day),
  ROUND(transactions::numeric / SUM(transactions) OVER(PARTITION BY day) * 100) 
FROM sales
WHERE day BETWEEN '2016-08-01' AND '2016-08-07';


--///////////
-- the position of each store in the global network based on their ratings
SELECT
  id,
  country,
  city,
  rating,
  RANK() OVER(ORDER BY rating DESC)
FROM store;


-- // we can add PARTITION BY to calculate the positions independently for each country:
SELECT
  id,
  country,
  city,
  rating,
  RANK() OVER(PARTITION BY country ORDER BY rating DESC)
FROM store;


/*
5. Take into account the period between August 10 and August 14, 2016. For each row of sales, show the following information: store_id, day, number of customers and the rank based on the number of customers in the particular store (in descending order).
*/

SELECT
  store_id,
  day,
  customers,
  RANK() OVER(PARTITION BY store_id ORDER BY customers DESC)
FROM sales
WHERE day BETWEEN '2016-08-10' AND '2016-08-14';


/*
6. Take the sales between August 1 and August 10, 2016. For each row, show the store_id, the day, the revenue on that day and quartile number (quartile means we divide the rows into four groups) based on the revenue of the given store in the descending order.
*/

SELECT
  store_id,
  day,
  revenue,
  NTILE(4) OVER(PARTITION BY store_id ORDER BY revenue DESC)
FROM sales
WHERE day BETWEEN '2016-08-01' AND '2016-08-10';

-- ////////////////
-- The CTE in the parentheses creates a separate ranking of stores in each country based on their rating. 
-- In the outer query, we simply return the rows with the right rank. As a result, we'll see the best store in each country.
WITH ranking AS (
  SELECT
    country,
    city,
    RANK() OVER(PARTITION BY country ORDER BY rating DESC) AS rank
  FROM store
)

SELECT
  country,
  city
FROM ranking
WHERE rank = 1;


/*
7. For each store, show a row with three columns: store_id, the revenue on the best day in that store in terms of the revenue and the day when that best revenue was achieved.
*/

WITH ranking AS (
  SELECT
      store_id,
      day,
      revenue,
      RANK() OVER(PARTITION BY store_id ORDER BY revenue DESC) AS rank
  FROM sales
)

SELECT
  store_id,
  revenue,
  day
FROM ranking
WHERE rank = 1;


/*
8. Let's analyze sales data between August 1 and August 3, 2016. For each row, show store_id, day, transactions and the ranking of the store on that day in terms of the number of transactions as compared to other stores. The store with the greatest number should get 1 from a window function. Use individual row ranks even when two rows share the same value. Name the column place_no.
*/

SELECT
      store_id,
      day,
      transactions,
      ROW_NUMBER() OVER(PARTITION BY day ORDER BY transactions DESC) AS place_no
FROM sales
WHERE day BETWEEN '2016-08-01' AND '2016-08-03'


/*
9. For each day of the sales statistics, show the day, the store_id of the best store in terms of the revenue on that day, and that revenue.
*/

WITH ranking AS (
  SELECT
  	day,
      	store_id,
  	ROW_NUMBER() OVER(PARTITION BY day ORDER BY revenue DESC) rank,
      	revenue
  FROM sales
)

SELECT 
	day,
	store_id,
    	revenue
FROM ranking
WHERE rank = 1




/*
10. Divide the sales results for each store into four groups based on the number of transactions and for each store, show the rows in the group with the lowest numbers of transactions: store_id, day, transactions.
*/

WITH ranking AS (
  SELECT
  	store_id,
  	day,
    transactions,
  	NTILE(4) OVER(PARTITION BY store_id ORDER BY transactions ASC) rank  	
  FROM sales
)

SELECT 
	store_id,
  	day,
    transactions
FROM ranking
WHERE rank = 1

-- SELECT
  id,
  country,
  city,
  opening_day,
  rating,
  MAX(rating) OVER(
    PARTITION BY country
    ORDER BY opening_day
    ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
FROM store;


/*
11. Show sales statistics between August 1 and August 7, 2016. For each row, show store_id, day, revenue and the best revenue in the respective store up to that date.
*/

SELECT
      store_id,
      day,
      revenue,
      MAX(revenue) OVER(
    	PARTITION BY store_id
    	ORDER BY day
    	ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
FROM sales
WHERE day BETWEEN '2016-08-01' AND '2016-08-07'


/*
12. Take sales from the period between August 1 and August 10, 2016. For each row, show the following information: store_id, day, number of transactions and the average number of transactions in the respective store in the window frame starting 2 days before and ending 2 days later with respect to the current row.
*/

SELECT
      store_id,
      day,
      transactions,
      AVG(transactions) OVER(
    	PARTITION BY store_id
    	ORDER BY day
    	ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING)
FROM sales
WHERE day BETWEEN '2016-08-01' AND '2016-08-10'


/*
13. For each sales row, show the following information: store_id, day, revenue and the future cash flow receivable by the headquarters (i.e. the total revenue in that store, counted from the current day until the last day in our table).
*/

SELECT
      store_id,
      day,
      revenue,
      SUM(revenue) OVER(
    	PARTITION BY store_id
    	ORDER BY day
    	ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
FROM sales

-- //////////////
SELECT
  country,
  city,
  opening_day,
  LEAD(city, 1, 'NaN') OVER(PARTITION BY country ORDER BY opening_day)
FROM store;

/*
14. For each store, show the sales in the period between August 5, 2016 and August 10, 2016: store_id, day, number of transactions, number of transactions on the previous day and the difference between these two values.
*/

SELECT
  store_id,
  day,
  transactions,
  LAG(transactions, 1) OVER(PARTITION BY store_id ORDER BY day),
  transactions - LAG(transactions, 1) OVER(PARTITION BY store_id ORDER BY day)
FROM sales
WHERE day BETWEEN '2016-08-05' AND '2016-08-10'

-- //////////////

SELECT
  country,
  city,
  rating,
  FIRST_VALUE(city) OVER(PARTITION BY country ORDER BY rating DESC)
FROM store;


/*
15. Show sales figures in the period between August 1 and August 3: for each store, show the store_id, the day, the revenue and the date with the best revenue in that period as best_revenue_day
*/

SELECT
  store_id,
  day,
  revenue,
  FIRST_VALUE(day) OVER(PARTITION BY store_id ORDER BY revenue DESC) AS best_revenue_day
FROM sales
WHERE day BETWEEN '2016-08-01' AND '2016-08-03'

/*
16. For each row of the sales figures, show the following information: store_id, day, revenue, revenue a week before and the ratio of revenue today to the revenue a week before expressed in percentage with 2 decimal places.
*/

SELECT
  store_id,
  day,
  revenue,
  LAG(revenue, 7) OVER(PARTITION BY store_id ORDER BY day),
  ROUND(revenue / LAG(revenue, 7) OVER(PARTITION BY store_id ORDER BY day) * 100, 2)
FROM sales


/*
17. For each row, show the following columns: store_id, day, customers and the number of clients in the 5th greatest store in terms of the number of customers on that day.
*/

SELECT
  store_id,
  day,
  customers,
  NTH_VALUE(customers, 5) 
  	OVER(PARTITION BY day ORDER BY customers DESC
    	ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
FROM sales;



/*
18. Select all the information from the repairs table.

Our repair workshop collects statistics for popular phones. Each row contains the phone name, the day, the number of free repairs performed (as part of warranty), the number of paid repairs performed on that day and the revenue generated by the paid repairs.
*/

SELECT phone, day, free_repairs, paid_repairs, revenue
FROM repairs 


/*
19. For each day, show the following two columns: day and the name of the second most frequently repaired phone on that day. Only take into account free_repairs.
*/

WITH ranking AS 
(
  SELECT
    day,
    phone,
    RANK() OVER(PARTITION BY day ORDER BY free_repairs DESC) AS rank
  FROM repairs
)

SELECT
  day,
  phone
FROM ranking
WHERE rank = 2;


/*
20. For each phone, show the following information: phone, day, revenue and the revenue for the first repair for each phone (column name first_revenue)
*/

SELECT
  phone,
  day,
  revenue,
  FIRST_VALUE(revenue) OVER(
    PARTITION BY phone
    ORDER BY day
    ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS first_revenue
FROM repairs;


/*
21. 
*/


/*
22. 
*/


/*
23. 
*/


/*
24. 
*/


/*
25. 
*/