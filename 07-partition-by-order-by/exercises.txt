/*
1. Select all the information from the store table.

Each store has its own id, country and city. There is only one store per city in our table to make things a bit easier. Apart from that, you can see when the store was opened and what rating it has (1-5), based on customers' opinions.
*/

SELECT id, country,	city, opening_day, rating
FROM store 


/*
2. Select all the information from the sales table.

In this table, the sales results are gathered for each store from the period between August 1 and August 14 2016. You can find the id of the store, the date, and three important values: the total revenue on that day, the number of transactions and the number of customers who entered the store (but not necessarily bought anything).
*/

SELECT store_id, day, revenue, transactions, customers
FROM sales;


-- ////////////

SELECT
  country,
  city,
  rating,
  AVG(rating) OVER(PARTITION BY country)
FROM store;


/*
3. For each sales row, show the store_id, day, revenue on that day and the average revenue in that store.
*/

SELECT
  store_id,
  day,
  revenue,
  AVG(revenue) OVER(PARTITION BY store_id)
FROM sales;



/*
4. For each sales row between August 1 and August 7, 2016, show the store_id, day, number of transactions, the total number of transactions on that day in any store and the ratio of the two last columns shown as percentage rounded to integer values.
*/

SELECT
  store_id,
  day,
  transactions,
  SUM(transactions) OVER(PARTITION BY day),
  ROUND(transactions::numeric / SUM(transactions) OVER(PARTITION BY day) * 100) 
FROM sales
WHERE day BETWEEN '2016-08-01' AND '2016-08-07';


--///////////
-- the position of each store in the global network based on their ratings
SELECT
  id,
  country,
  city,
  rating,
  RANK() OVER(ORDER BY rating DESC)
FROM store;


-- // we can add PARTITION BY to calculate the positions independently for each country:
SELECT
  id,
  country,
  city,
  rating,
  RANK() OVER(PARTITION BY country ORDER BY rating DESC)
FROM store;


/*
5. Take into account the period between August 10 and August 14, 2016. For each row of sales, show the following information: store_id, day, number of customers and the rank based on the number of customers in the particular store (in descending order).
*/

SELECT
  store_id,
  day,
  customers,
  RANK() OVER(PARTITION BY store_id ORDER BY customers DESC)
FROM sales
WHERE day BETWEEN '2016-08-10' AND '2016-08-14';


/*
6. 
*/


/*
7. 
*/


/*
8. 
*/


/*
9. 
*/


/*
10. 
*/


/*
11. 
*/


/*
12. 
*/


/*
13. 
*/


/*
14. 
*/


/*
15. 
*/


/*
16. 
*/


/*
17. 
*/


/*
18. 
*/


/*
19. 
*/


/*
20. 
*/


/*
21. 
*/


/*
22. 
*/


/*
23. 
*/


/*
24. 
*/


/*
25. 
*/