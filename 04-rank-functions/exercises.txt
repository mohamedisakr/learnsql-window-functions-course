/*
1. Select all the information from table game.

Each game has an id and a name and is runnable on a specific platform. It is characterized by a specific genre, has an editor_rating and size in MB. The column released specifies when the game was released, whereas updated â€“ when the game was last updated.
*/

SELECT id,	name,	platform,	genre,	editor_rating,	size,	released,	updated
FROM game


/*
2. Select all the information from the purchase table.

Each purchase of a game is stored in this table. The purchase has its own id, the id of the game, the price paid and the date of purchase.
*/

SELECT id,	game_id,	price,	date
FROM purchase 



/*
3. For each game, show name, genre, date of update and its rank. The rank should be created with RANK() and take into account the date of update.
*/
SELECT name, genre, updated, RANK() OVER(ORDER BY updated)
FROM game

SELECT
  name,
  platform,
  editor_rating,
  DENSE_RANK() OVER(ORDER BY editor_rating)
FROM game;

/*
4. Use DENSE_RANK() and for each game, show name, size and the rank in terms of its size.
*/

SELECT
  name,
  size,
  DENSE_RANK() OVER(ORDER BY size)
FROM game;

SELECT
  name,
  platform,
  editor_rating,
  ROW_NUMBER() OVER(ORDER BY editor_rating)
FROM game;

/*
5. Use ROW_NUMBER() and for each game, show their name, date of release and the rank based on the date of release.
*/

SELECT
  name,
  released,
  ROW_NUMBER() OVER(ORDER BY released)
FROM game;

/*
6. For each game, show its name, genre and date of release. In the next three columns, show RANK(), DENSE_RANK() and ROW_NUMBER() sorted by the date of release.
*/

SELECT
  name,
  genre,
  released,
  RANK() OVER(ORDER BY released), 
  DENSE_RANK() OVER(ORDER BY released),
  ROW_NUMBER() OVER(ORDER BY released)
FROM game;


SELECT
  name,
  platform,
  editor_rating,
  RANK() OVER(ORDER BY editor_rating DESC)
FROM game;


/*
7. Let's use DENSE_RANK() to show the latest games from our studio. For each game, show its name, genre, date of release and DENSE_RANK() in the descending order.
*/

SELECT
  name,
  genre,
  released,  
  DENSE_RANK() OVER(ORDER BY released DESC)
FROM game;


SELECT
  name,
  genre,
  editor_rating,
  RANK() OVER(ORDER BY released DESC, size ASC)
FROM game;

/*
8. We want to find games which were both recently released and recently updated. For each game, show name, date of release and last update date, as well as their rank: use ROW_NUMBER(), sort by release date and then by update date, both in the descending order.
*/

SELECT
  name,
  released,
  updated,
  ROW_NUMBER() OVER(ORDER BY released DESC, updated DESC)
FROM game;


SELECT
  name,
  RANK() OVER (ORDER BY editor_rating)
FROM game
ORDER BY size DESC;

/*
9. For each game find its name, genre, its rank by size. Order the games by date of release with newest games coming first.
*/

SELECT
  name,
  genre,
  RANK() OVER(ORDER BY size)
FROM game
ORDER BY released DESC;

/*
10. For each purchase, find the name of the game, the price, and the date of the purchase. Give purchases consecutive numbers by date when the purchase happened, so that the latest purchase gets number 1. Order the result by editor's rating of the game.
*/

SELECT
  g.name,
  p.price,
  p.date,
  ROW_NUMBER() OVER(ORDER BY p.date DESC)
FROM purchase p JOIN game g
	ON p.game_id = g.id
ORDER BY g.editor_rating;

SELECT
  name,
  genre,
  editor_rating,
  NTILE(3) OVER (ORDER BY editor_rating DESC)
FROM game;

/*
11. We want to divide games into 4 groups with regard to their size, with biggest games coming first. For each game, show its name, genre, size and the group it belongs to.
*/

SELECT
  name,
  genre,
  size,
  NTILE(4) OVER (ORDER BY size DESC)
FROM game;

/*
12. Split the games into 5 groups based on their date of last update. The most recently updated games should come first. For each of them, show the name, genre, date of update and the group they were assigned to. In the result, notice how many items the groups have (varying value).
*/

SELECT
  name,
  genre,
  updated,
  NTILE(5) OVER (ORDER BY updated DESC)
FROM game;


WITH ranking AS (
  SELECT
    name,
    RANK() OVER(ORDER BY editor_rating DESC) AS rank
  FROM game
)


SELECT name
FROM ranking
WHERE rank = 2;

--/////////////

SELECT
  name,
  RANK() OVER(ORDER BY editor_rating DESC)
FROM game;


-- //////////////////////

WITH ranking AS (
  SELECT
    name,
    RANK() OVER(ORDER BY editor_rating DESC) AS rank
  FROM game
)

SELECT name
FROM ranking
WHERE rank = 2;


/*
13. Find the name, genre and size of the smallest game in our studio.

Remember the steps:

Create the ranking query so that the smallest game gets rank 1.
Use WITH to select rows with rank 1.
*/

WITH ranking AS (
  SELECT
    name,
  	genre,
  	size,
    RANK() OVER(ORDER BY size ASC) AS rank
  FROM game
)

SELECT name, genre,	size
FROM ranking
WHERE rank = 1;







