/*
1. Select all the information from the customer table.

Whoever wants to buy anything in our store needs to register as a customer. Each customer in our system has an id, first_name and last_name, join_date and the country.
*/

SELECT id, first_name, last_name, join_date, country
FROM customer;


/*
2. Select all the information from the movie table.

Movies in our system have their ids and titles, of course. Then, there is the year of release, the genre of the movie and the rating by the editors of the store (0-10).
*/

SELECT id, title, release_year, genre, editor_rating
FROM movie


/*
3. Select all the information from the review table.

Customers can rate movies, too! This is done via reviews. Each review has an id, a rating (0-10), the customer_id and the movie_id, of course.
*/

SELECT id, rating, customer_id, movie_id
FROM review 


/*
4. Select all the information from the single_rental table.

Now, let's get down to business. The first possibility in our store is to rent a single movie for a certain period of time. Each rental has an id, rental_date (when the rent starts), rental_period (in days), the platform (desktop, mobile or tablet), customer_id, movie_id, payment_date (you can pay a few day after you rent) and the payment_amount, or the price.
*/

SELECT id, rental_date, rental_period, platform, customer_id, movie_id, payment_date, payment_amount
FROM single_rental;


/*
5. Select all the information from the subscription table.

Real movie lovers get a subscription instead of single rentals. Each subscription has an id, a length (in days), a start_date, a platform (same as the platforms for single rentals), payment_date, payment_amount and customer_id.
*/

SELECT id, length, start_date, platform, payment_date, payment_amount, customer_id
FROM subscription;


/*
6. Select all the information from the giftcard table.

The last thing you can purchase are giftcards for someone else. Each giftcard has an id, amount_worth (30, 50 or 100 dollars to spend in our store), customer_id, payment_date and payment_amount.
*/

SELECT id, amount_worth, customer_id, payment_date, payment_amount
FROM giftcard;



/*
7. Show each gift card purchased: id, amount_worth and the total number of all gift cards purchased.
*/

SELECT
  id,
  amount_worth,
  COUNT(id) OVER()
FROM giftcard;


/*
8. Show each subscription: id, length, start_date, payment_amount and the total amount paid for all subscriptions ever.
*/

SELECT
  id,
  length,
  start_date,
  payment_amount,
  SUM(payment_amount) OVER()
FROM subscription;



/*
9. Show each single rental: id, rental_period, payment_amount, the average amount paid from all the single rentals ever and the ratio of the two last columns.
*/

SELECT
  id,
  rental_period, 
  payment_amount,
  AVG(payment_amount) OVER(),
  payment_amount / AVG(payment_amount) OVER()
FROM single_rental;



/*
10. For each movie, show its title, editor_rating, genre and the average editor_rating of all movies of the same genre.
*/

SELECT
  title, 
  editor_rating, 
  genre,
  AVG(editor_rating) OVER(PARTITION BY genre)
FROM movie;



/*
11. For each distinctive movie, show the title, the average customer rating for that movie (as the avg_movie_rating column), the average customer rating for the entire genre (as the avg_genre_rating column), and the average customer rating for all movies (as the avg_rating column).
*/

SELECT
  distinct m.title, 
  AVG(r.rating) OVER(PARTITION BY r.movie_id) AS avg_movie_rating,
  AVG(r.rating) OVER(PARTITION BY m.genre) AS avg_genre_rating ,
  AVG(r.rating) OVER() AS avg_rating     
FROM movie m JOIN review r 
	ON m.id = r.movie_id


/*
12. Show:

distinctive amount_worth values of giftcards,
count of the number of giftcards with this value that were ever purchased (shown as count_1).
count of all giftcards ever purchased (shown as count_2).
show the percentage that the respective giftcard type constitutes in relation to all gift cards. Show the last column rounded to integer values and name it percentage.
Make sure you've got matching column names: amount_worth, count, count, round.
*/

SELECT
  DISTINCT amount_worth, 
  COUNT(id) OVER(PARTITION BY amount_worth) AS count_1, 
  COUNT(id) OVER() AS count_2,
  ROUND(COUNT(id) OVER(PARTITION BY amount_worth)::numeric / COUNT(id) OVER() * 100) AS percentage 
FROM giftcard;


/*
13. For each customer, show the following information: first_name, last_name, the average payment_amount from single rentals by that customer and the average payment_amount from single rentals by any customer from the same country.
*/

SELECT
  DISTINCT c.first_name,
  c.last_name,
  AVG(r.payment_amount) OVER(PARTITION BY c.id), 
  AVG(r.payment_amount) OVER(PARTITION BY c.country)
FROM customer c JOIN single_rental r
	ON c.id = r.customer_id


------------------ Take a look at this example:
/*
WITH ranking AS
  (SELECT
    title,
    RANK() OVER(ORDER BY editor_rating DESC) AS rank
  FROM movie)

SELECT title
FROM ranking
WHERE rank = 2;

In the above example, we show the title of the second best movie in terms of the editor_rating.
*/


/*
14. For each movie, show the following information: title, release_year, editor_rating and the rank based on editor_rating. The movie with the highest editor_rating should have rank = 1. The same rank values are possible for multiple rows, but don't leave gaps in numbering.
*/

SELECT
    title,
    release_year, 
    editor_rating,
    DENSE_RANK() OVER(ORDER BY editor_rating DESC)
FROM movie


/*
15. Rank single_rentals in accordance with the price paid for them. For each single_rental, show the movie title, rental_period, payment_amount and the rank. Multiple single_rentals can share the same rank, the highest amount should have rank = 1 and gaps in numbering are allowed, too.
*/

SELECT
    m.title,
    r.rental_period, 
    r.payment_amount,
    RANK() OVER(ORDER BY r.payment_amount DESC) AS rank
FROM single_rental r JOIN movie m
	ON r.movie_id = m.id


/*
16. Show the first and last name of the customer who bought the second most recent giftcard along with the date when the payment took place. Assume that an individual rank is assigned for each giftcard purchase.
*/

WITH ranking AS
(
  SELECT 
	c.first_name,
    c.last_name,
  	g.payment_date,
	DENSE_RANK() OVER(ORDER BY g.payment_date DESC) AS rank
  FROM customer c JOIN giftcard g
	ON c.id = g.customer_id
)

SELECT 
	first_name,
    last_name,
    payment_date
FROM ranking
WHERE rank = 2;


/*
17. For each single rental, show the rental_date, the title of the movie rented, its genre, the payment_amount and the rank of the rental in terms of the price paid (the most expensive rental should have rank = 1). The ranking should be created separately for each movie genre. Allow the same rank for multiple rows and allow gaps in numbering too.
*/

SELECT
	r.rental_date,
    m.title,
    m.genre,
    r.payment_amount,
    RANK() OVER(PARTITION BY m.genre ORDER BY r.payment_amount DESC) AS rank
FROM single_rental r JOIN movie m
	ON r.movie_id = m.id


-- //////////////
/*
SELECT
  id,
  payment_date,
  payment_amount,
  SUM(payment_amount) OVER(
    ORDER BY payment_date
    ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
FROM subscription;

-- In the above query, we calculate a running total paid for all subscriptions up to the current row.
*/

/*
18. For each single rental, show the id, rental_date, payment_amount and the running total of payment_amounts of all rentals from the oldest one (in terms of rental_date) until the current row.
*/

SELECT
  id,
  rental_date,
  payment_amount,
  SUM(payment_amount) OVER(
    ORDER BY rental_date
    ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
FROM single_rental;

/*
19. For each single rental, show its id, rental_date, platform, payment_date, payment_amount and the average payment amount calculated by taking into account the previous two rows, the current row and the next two rows when sorted by the payment_date.
*/

SELECT
  id,
  rental_date,
  platform,
  payment_date,
  payment_amount,
  AVG(payment_amount) OVER(
    ORDER BY payment_date
    ROWS between 2 PRECEDING and 2 FOLLOWING)
FROM single_rental;


/*
20. For each subscription, show the following columns: id, length, platform, payment_date, payment_amount and the future cashflows calculated as the total money from all subscriptions starting from the beginning of the payment_date of the current row (i.e. include any other payments on the very same date) until the very end.
*/

SELECT
  id,
  length,
  platform,
  payment_date,
  payment_amount,
  SUM(payment_amount) OVER(
    ORDER BY payment_date
    RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
FROM subscription;


/*
21. For each single rental, show the following information: rental_date, title of the movie rented, genre of the movie, payment_amount and the highest payment_amount for any movie in the same genre rented from the first day up to the current rental_date. Show the last column as highest_amount.
*/

SELECT
  r.rental_date,
  m.title,
  m.genre,
  r.payment_amount,
  MAX(r.payment_amount) OVER(
    PARTITION BY m.genre
    ORDER BY r.rental_date
    ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS highest_amount
FROM single_rental r JOIN movie m
	ON r.movie_id = m.id

-- //////////////
/*
SELECT
  id,
  rating,
  LAG(rating) OVER(ORDER BY id)
FROM review;
The example above shows the rating given in each review and the rating given in the previous review.
*/

/*
22. For each giftcard, show its amount_worth, payment_amount and two more columns: the payment_amount of the first and last giftcards purchased in terms of the payment_date.
*/

SELECT
  amount_worth,
  payment_amount,
  FIRST_VALUE(payment_amount) OVER(ORDER BY payment_date),
  LAST_VALUE(payment_amount) OVER(ORDER BY payment_date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
FROM giftcard


/*
23. For each single rental, show the following columns: id, payment_date, payment_amount, the payment_amount of the previous single_rental in terms of the payment_date and the difference between the last two values.
*/

SELECT
	id,
    payment_date,
    payment_amount,
    LAG(payment_amount, 1) OVER (ORDER BY payment_date),
    payment_amount - LAG(payment_amount, 1) OVER (ORDER BY payment_date)
FROM single_rental 



/*
24. For each rental date, show the rental_date, the sum of payment amounts (column name payment_amounts) from single_rentals on that day, the sum of payment_amounts on the previous day and the difference between these two values.
*/


WITH stat_amount AS 
(
  SELECT
      rental_date,
      SUM(payment_amount) AS payment_amounts
  FROM single_rental
  GROUP BY rental_date
)

SELECT 
	rental_date, 
    payment_amounts, 
    LAG(payment_amounts, 1) OVER (ORDER BY rental_date),
    payment_amounts - LAG(payment_amounts, 1) OVER (ORDER BY rental_date) difference 
FROM stat_amount



/*
25. For each customer, show the following information: first_name, last_name, the sum of payments (AS sum_of_payments) for all single rentals and the sum of payments of the median customer in terms of the sum of payments (since there are 7 customers, pick the 4th customer as the median).
*/

SELECT 
	c.first_name,
    c.last_name,
    SUM(r.payment_amount) AS sum_of_payments,
    NTH_VALUE(SUM(r.payment_amount), 4) OVER(
        ORDER BY SUM(r.payment_amount)
        ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
    )
FROM customer c JOIN single_rental r
	ON c.id = customer_id
GROUP BY c.first_name, c.last_name;

-- Remember the previous part, part 7? This is where we combined ORDER BY with PARTITION BY:

/*
SELECT
  title,
  release_year,
  LEAD(title) OVER(PARTITION BY genre ORDER BY release_year)
FROM movie;
*/

-- In the above example, the last column will show the next movie that was released with the same genre.

/*
26. For each movie, show its title, genre, editor_rating and its rank based on editor_rating for all the movies in the same genre.
*/

SELECT
  title,
  genre,
  editor_rating,
  RANK() OVER(PARTITION BY genre ORDER BY editor_rating DESC)
FROM movie;

/*
27. For each review, show the following information: its id, title of the movie, the rating and the previous rating given by any customer to the same movie when sorted by the id of the reviews.
*/

SELECT
  r.id,
  m.title,
  r.rating,  
  LAG(r.rating, 1) OVER (PARTITION BY r.movie_id ORDER BY r.id) 
FROM review r JOIN movie m
	ON r.movie_id = m.id

