/*
1. Select all the information from the product table.

Just take a look at all those wonderful products! Each of them has an id, a name, and a third column which informs when it was introduced to the market.
*/

SELECT id, name, introduced
FROM product 


/*
2. Select all the information from stock_change table.

A single row in stock_change means that either a given number of products left the warehouse, or were delivered to the warehouse.

You can find:

the id of the change.
the product_id.
the quantity (positive values mean delivery, negative values mean the products left the warehouse).
the changed when it happened.
*/

SELECT id, product_id, quantity, changed
FROM stock_change 


/*
3. Select all the information from the single_order table.

A pretty simple table, each order has an id, was placed on a specific day and has a given total_price.
*/

SELECT id, placed, total_price
FROM single_order 


/*
4. Select all the information from the order_position table.

Each order_position is a single position in an order (you may think of it as a position in an invoice). It has its own id, the id of the product, id of the order, and the quantity of the product.
*/

SELECT id, product_id, order_id, quantity
FROM order_position 

-- ///////////////////////

SELECT
  id,
  total_price,
  SUM(total_price) OVER(ORDER BY placed ROWS UNBOUNDED PRECEDING)
FROM single_order;

-- ////////////////////////

SELECT
  id,
  quantity,
  changed,
  SUM(quantity) OVER(
    ORDER BY changed
    ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
FROM stock_change

/*
5. For each order, show its id, the placed date, and the third column which will count the number of orders up to the current order when sorted by the placed date.
*/
SELECT
  id,
  placed,
  COUNT(placed) OVER(ORDER BY placed ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
FROM single_order



/*
6. Warehouse workers always need to pick the products for orders by hand and one by one. 
For positions with order_id = 5, calculate the remaining sum of all the products to pick. 
For each position from that order, show its id, the id of the product, the quantity and the quantity of the remaining items (including the current row) when sorted by the id in the ascending order.
*/

SELECT
  id,
  product_id,
  quantity,
  SUM(quantity) OVER(
    ORDER BY id
    ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
FROM order_position
WHERE order_id = 5;



/*
7. For each product, show its id, name, introduced date and the count of products introduced up to that point.
*/

SELECT
  id,
  name,
  introduced,
  COUNT(introduced) OVER(
    ORDER BY introduced
    ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
FROM product


/*
8. Now, for each single_order, show its placed date, total_price, the average price calculated by taking 2 previous orders, the current order and 2 following orders (in terms of the placed date) and the ratio of the total_price to the average price calculated as before.
*/

SELECT
  placed,
  total_price,
  AVG(total_price) OVER(
    ORDER BY placed
    ROWS between 2 PRECEDING and 2 FOLLOWING),
  total_price / AVG(total_price) OVER(
    				ORDER BY placed
    				ROWS between 2 PRECEDING and 2 FOLLOWING)
FROM single_order


-- The same rules applies for FOLLOWING. As a way of example, the following query:

SELECT
  id,
  name,
  introduced,
  COUNT(id) OVER(ORDER BY introduced ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
FROM product;

-- Can be rewritten to:

SELECT
  id,
  name,
  introduced,
  COUNT(id) OVER(ORDER BY introduced ROWS UNBOUNDED PRECEDING)
FROM product;


/*
9. You will now have a chance to practice abbreviations. Pick those stock changes which refer to product_id = 3. For each of them, show the id, changed date, quantity, and the running total, indicating the current stock status. Sort the rows by the changed date in the ascending order.
*/

SELECT
  id,
  changed,
  quantity,
  SUM(quantity) OVER(ORDER BY changed ROWS UNBOUNDED PRECEDING)
FROM stock_change
WHERE product_id = 3
ORDER BY changed DESC;


/*
10. For each single_order, show its placed date, total_price and the average price from the current single_order and three previous orders (in terms of the placed date).
*/

SELECT
  placed,
  total_price,
  AVG(total_price) OVER(ORDER BY placed ROWS 3 PRECEDING)
FROM single_order


-- ////////////////////

SELECT
  id,
  placed,
  total_price,
  SUM(total_price) OVER(ORDER BY placed RANGE UNBOUNDED PRECEDING)
FROM single_order;



/*
11. Modify the example so that it shows the average total_price for single days for each row.
*/

SELECT
  id,
  placed,
  total_price,
  AVG(total_price) OVER(ORDER BY placed RANGE CURRENT ROW)
FROM single_order;

-- ////////////////////////

/*
SELECT
  id,
  placed,
  total_price,
  ROW_NUMBER() OVER(ORDER BY placed),
  SUM(total_price) OVER(
    ORDER BY placed
    ROWS UNBOUNDED PRECEDING)
FROM single_order
*/

/*
SELECT
  id,
  placed,
  total_price,
  RANK() OVER(ORDER BY placed),
  SUM(total_price) OVER(
    ORDER BY placed
    RANGE UNBOUNDED PRECEDING)
FROM single_order
*/



/*
12. For each stock_change with product_id = 7, show its id, quantity, changed date and another column to count the number of stock changes with product_id = 7 on that particular date.
*/

SELECT
  id,
  quantity,
  changed,
  COUNT(quantity) OVER(ORDER BY changed RANGE CURRENT ROW)
FROM stock_change
WHERE product_id = 7;



/*
13. For each stock_change, show id, product_id, quantity, changed date, and the total quantity change from all stock_change for that product.
*/

SELECT
  id,
  product_id,
  quantity,
  changed,
  SUM(quantity) OVER(ORDER BY product_id RANGE CURRENT ROW)
FROM stock_change


/*
14. For each stock_change, show its id, changed date, and the number of any stock changes that took place on the same day or any time earlier.
*/

SELECT
  id,
  changed,
  COUNT(id) OVER(ORDER BY changed RANGE UNBOUNDED PRECEDING)
FROM stock_change;




/*
15. Our finance department needs to calculate future cashflows for each date. Let's help them. In order to do that, we need to show each order: its id, placed date, total_price and the total sum of all prices of orders from the very same day or any later date.
*/

SELECT
  id,
  placed,
  total_price,
  SUM(total_price) OVER(ORDER BY placed RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
FROM single_order;




/*
16. We'll start with not specifying an ORDER BY clause within OVER(...).

For each single order, show its id, date when it was placed, the total price and the sum of all total prices.

Note that the SUM computes the sum of all prices in the table, even though you did not specify the window frame.
*/

SELECT
  id,
  placed,
  total_price,
  SUM(total_price) OVER()
FROM single_order;


/*
17. Just as in one of the previous exercises, we'll be looking for the running sum of single orders. For each order, show its id, placed date, total_price and the sum of all total prices. Sort the orders by the placed date, but do not specify any window frame.

The sum of total_prices should be calculated as if you wrote RANGE UNBOUNDED PRECEDING.
*/

SELECT
  id,
  placed,
  total_price,
  SUM(total_price) OVER(ORDER BY placed)
FROM single_order;



/*
18. Select all the information from the revenue table.

There are only three columns: department_id, year and amount. Mind you, you will need to write very similar queries in this part. The devil's in the detail!
*/

SELECT department_id,	year,	amount
FROM revenue


/*
19. For each row from department with id = 2, show its department_id, year, amount and the total amount from the current year + two previous years.
*/

SELECT 
	department_id,	
    year,	
    amount,
    SUM(amount) OVER(ORDER BY year ROWS 2 PRECEDING)
FROM revenue
WHERE department_id = 2

/*
20. 
*/

