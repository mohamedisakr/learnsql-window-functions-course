/*
1. Select all the information from the website table.

Each website has an id, name, monthly budget and the date of opening (opened).
*/

SELECT id,	name,	budget,	opened
FROM website


/*
2. Select all the information from the statistics table.

In this table, you can find the statistics from May 2016. Each generated statistics row corresponds to a certain website_id and a particular day. Column users shows how many unique people visited the website that day. Column impressions indicates how many times an advertisement was shown to a user. clicks means the number of clicks on an advertisement. Column revenue is the total profit generated by those clicks on that day.
*/

SELECT website_id,	day,	users,	impressions,	clicks,	revenue
FROM statistics 

-- ////////////

SELECT
  name,
  opened,
  LEAD(name) OVER(ORDER BY opened)
FROM website;

-- /////////////////

SELECT
  name,
  opened,
  budget,
  LEAD(budget) OVER(ORDER BY opened)
FROM website;

/*
3. For all the statistics of the website with id = 1, show the day, the number of users and the number of users on the next day.
*/

SELECT day, users, LEAD(users) OVER(ORDER BY day)
FROM statistics 
WHERE website_id = 1

-- ////////////

SELECT
  day,
  clicks,
  LEAD(clicks) OVER(ORDER BY day),
  LEAD(clicks) OVER(ORDER BY day) - clicks AS difference
FROM statistics
WHERE website_id = 2;


/*
4. For website_id = 1, show each statistics row: day, revenue, revenue on the next day and the difference between these two values (as next day's minus that day's revenue).
*/

SELECT day, revenue, LEAD(revenue) OVER(ORDER BY day), LEAD(revenue) OVER(ORDER BY day) - revenue AS difference
FROM statistics 
WHERE website_id = 1


-- ////////////
SELECT
  name,
  opened,
  LEAD(opened,2) OVER(ORDER BY opened)
FROM website;

/*
5. Take the statistics for the website with id = 2 between 1 and 14 May 2016 and show the day, the number of users and the number of users 7 days later.

Note that the last 7 rows don't have a value in the last column, because no rows '7 days from now' can be found for them.
*/

SELECT day, users, LEAD(users, 7) OVER(ORDER BY day)
FROM statistics 
WHERE website_id = 2 AND day BETWEEN '2016-05-01' AND '2016-05-14'

-- ////////////

SELECT
  name,
  opened,
  LEAD(opened,2,'2000-01-01') OVER(ORDER BY opened)
FROM website;


/*
6. Modify the template based on the previous exercise so that it shows -1 instead of NULL if no LEAD value is found.
*/

SELECT
  day,
  users,
  LEAD(users,7, -1) OVER(ORDER BY day)
FROM statistics
WHERE website_id = 2
  AND day BETWEEN '2016-05-01' AND '2016-05-14';


-- //////////////

SELECT
  name,
  opened,
  LAG(name) OVER(ORDER BY opened)
FROM website;

/*
7. Show the statistics for the website with id = 3: day, number of clicks that day and the number of clicks on the previous day.

Note that there won't be any previous value for the first row.
*/

SELECT
  day,
  clicks, 
  LAG(clicks) OVER(ORDER BY day)
FROM statistics
WHERE website_id = 3

-- //////////////

SELECT
  name,
  opened,
  LAG(opened,2) OVER(ORDER BY opened)
FROM website;

/*
8. Show the statistics for the website with id = 3: day, revenue and the revenue 3 days before.
*/

SELECT
  day,
  revenue, 
  LAG(revenue, 3) OVER(ORDER BY day)
FROM statistics
WHERE website_id = 3

-- /////////////////

SELECT
  name,
  opened,
  LAG(opened,2,'2000-01-01') OVER(ORDER BY opened)
FROM website;

/*
9. Modify the template from the previous exercise so that it shows -1.00 for rows with no revenue value 3 days before.
*/

SELECT
  day,
  revenue,
  LAG(revenue, 3, -1.00) OVER(ORDER BY day)
FROM statistics
WHERE website_id = 3;


/*
10. RPM (revenue per thousand impressions) is defined as the revenue divided by the number of impressions, times 1000.

RPM = (revenue / number of impressions) * 1000
For each statistics row with website_id = 2, show the day, the RPM and the RPM 7 days later. Rename the columns to RPM and RPM_7.
*/

SELECT
  day,
  revenue / impressions * 1000 AS RPM,
  LEAD(revenue / impressions, 7) OVER(ORDER BY day) * 1000 AS RPM_7
FROM statistics
WHERE website_id = 2;


/*
11. Let's define conversion rate as the number of clicks divided by the number of impressions, multiplied by 100 to obtain percentages.

For website_id = 1 and dates between May 15 and May 31, 2016, show each statistics row: day, clicks, impressions, conversion rate (as the conversion column) and the conversion rate on the previous day (as the previous_conversion column).
*/


SELECT
  day,
  clicks,
  impressions,
  clicks::numeric / impressions::numeric * 100 AS conversion,
  LAG(clicks::numeric / impressions::numeric) OVER(ORDER BY day) * 100 AS previous_conversion 
FROM statistics
WHERE website_id = 1 AND day BETWEEN '2016-05-15' AND '2016-05-31';

-- ////////////

SELECT
  name,
  opened,
  budget,
  FIRST_VALUE(budget) OVER(ORDER BY opened)
FROM website;


/*
12. Show the statistics for website_id = 2. For each row, show the day, the number of users and the smallest number of users ever.
*/

SELECT
  day,
  users,
  FIRST_VALUE(users) OVER(ORDER BY users) 
FROM statistics
WHERE website_id = 2;


/*
13. Show the statistics for website_id = 3. For each row, show the day, the revenue and the revenue on the first day.
*/

SELECT
  day,
  revenue,
  FIRST_VALUE(revenue) OVER(ORDER BY revenue) 
FROM statistics
WHERE website_id = 3;



/*
14. Run the template from the instruction.

As you can see, the result is a bit different from our expectations. LAST_VALUE shows the current value instead of the highest value.
*/

SELECT
  name,
  opened,
  LAST_VALUE(opened) OVER(ORDER BY opened)
FROM website;


/*
15. Alright, let's run the new template to see if it works.
*/

SELECT
  name,
  opened,
  LAST_VALUE(opened) OVER(
    ORDER BY opened
    ROWS BETWEEN UNBOUNDED PRECEDING
      AND UNBOUNDED FOLLOWING)
FROM website;


-- /////

SELECT
  name,
  budget,
  LAST_VALUE(budget) OVER(
    ORDER BY opened
    ROWS BETWEEN UNBOUNDED PRECEDING
      AND UNBOUNDED FOLLOWING)
FROM website;

/*
16. Show the statistics for website_id = 1. For each row, show the day, the number of impressions and the number of impressions on the day with the most users.
*/

SELECT
  day,
  impressions,
  LAST_VALUE(impressions) OVER(
    ORDER BY users
    ROWS BETWEEN UNBOUNDED PRECEDING
      AND UNBOUNDED FOLLOWING)
FROM statistics
WHERE website_id = 1;


/*
17.
*/


/*
18.
*/


/*
19.
*/