/*
1. Select all columns from the auction table.

The table stores information about past Internet auctions from a certain online auction website. You can see the following columns:

id – unique id of the auction.
category_id – id of the category, like: furniture, health etc..
asking_price – the initial price set by the seller.
final_price – the highest bid, paid to the seller.
views – number of views of the auction on the website.
participants – number of users who took part in the auction.
country – country of the auction.
ended – the day on which the auction ended and the item was sold.
*/

SELECT id, category_id, asking_price, final_price, views, participants, country, ended
FROM auction

-- //////////

SELECT 
  id, 
  final_price 
FROM auction 
WHERE final_price > AVG(final_price) OVER()

-- ////////

SELECT
  id,
  final_price 
FROM (
  SELECT
    id,
    final_price,
    AVG(final_price) OVER() AS avg_final_price
  FROM auction) c
WHERE final_price > avg_final_price

-- ////////////

SELECT
  id,
  final_price 
FROM (
  SELECT
    id,
    final_price,
    AVG(final_price) OVER() AS avg_final_price
  FROM auction) c
WHERE final_price > avg_final_price

/*
2. Find the id, country and views for those auctions where the number of views was below the average.
*/

WITH cte AS
(
  SELECT
    id,
    country,
    views,
    AVG(views) OVER() AS avg_views
  FROM auction
)  
SELECT
  	id,
    	country,
  	views 
FROM cte
WHERE views < avg_views

-- ///////////////////
SELECT 
  country, 
  AVG(final_price) 
FROM auction 
GROUP BY country 
HAVING AVG(final_price) > AVG(final_price) OVER ();


/*
3. Again, we would like to show those countries (country name and average final price) that have the average final price higher than the average price from all over the world. Correct the query by using a subquery
*/

SELECT
  country,
  AVG(final_price) 
FROM auction 
GROUP BY country 
HAVING AVG(final_price) > (SELECT AVG(final_price) FROM auction);

-- /// with cte not working 
WITH cte AS
(
	SELECT 
  		country, 
  		AVG(final_price) OVER (PARTITION BY country ORDER BY final_price) avg_final_price,
  		AVG(final_price) OVER () avg_world_price
	FROM auction 
	--GROUP BY country, final_price
)

SELECT 
  country, 
  avg_final_price
FROM cte 
WHERE avg_final_price > avg_world_price

-- ///////////////

SELECT 
  NTILE(4) OVER(ORDER BY views DESC) AS quartile, 
  MIN(views), 
  MAX(views) 
FROM auction 
GROUP BY NTILE(4) OVER(ORDER BY views DESC);


-- //////////////

SELECT
  quartile,
  MIN(views),
  MAX(views)
FROM
  (SELECT
    views,
    ntile(4) OVER(ORDER BY views DESC) AS quartile
  FROM auction) c
GROUP BY quartile;

/*
4. Now, divide all auctions into 6 equal groups based on the asking_price in ascending order. Show columns group_no, minimal, average and maximal value for that group. Sort by the group in ascending order.
*/

WITH cte AS
(
	SELECT    	
  		asking_price,
	    	ntile(6) OVER(ORDER BY asking_price ASC) AS group_no
  	FROM auction
)

SELECT
  group_no,
  MIN(asking_price),
  AVG(asking_price),
  MAX(asking_price)
FROM cte
GROUP BY group_no
ORDER BY group_no ASC;



/*
5. For each auction, show the following columns: id, views and quartile based on the number of views in descending order. Order the rows by the quartile.
*/

SELECT
  id,
  views,
  NTILE(4) OVER(ORDER BY views DESC) AS quartile
FROM auction
ORDER BY NTILE(4) OVER(ORDER BY views DESC);


-- ////////////////////

SELECT 
  category_id, 
  MAX(final_price) AS max_final, 
  AVG(MAX(final_price)) OVER() 
FROM auction 
GROUP BY category_id



/*
6. Group the auctions by the country. Show the country, the minimal number of participants in an auction and the average minimal number of participants across all countries.
*/

SELECT 
  country, 
  MIN(participants), 
  AVG(MIN(participants)) OVER() 
FROM auction 
GROUP BY country


/*
7. Group the auctions by category_id and show the category_id and maximal asking price in that category alongside the average maximal price across all categories.
*/

SELECT 
  category_id, 
  MAX(asking_price), 
  AVG(MAX(asking_price)) OVER() 
FROM auction 
GROUP BY category_id


/*
8. Now, group the auctions based on the category. Show category_id, the sum of final prices for auctions from this category and a ranking based on that sum, with the highest sum coming first.
*/

SELECT
  category_id,
  SUM(final_price),
  RANK() OVER(ORDER BY SUM(final_price) DESC)
FROM auction
GROUP BY category_id;



/*
9. Group the auctions based on the day they ended and show the following columns: ended, the average number of views from auctions on that day and the ranking based on that average (the highest average should get the rank of 1).
*/

SELECT
  ended,
  AVG(views),
  RANK() OVER(ORDER BY AVG(views) DESC)
FROM auction
GROUP BY ended;


-- ////////////////

SELECT
  ended,
  SUM(final_price) AS sum_price,
  LAG(SUM(final_price)) OVER(ORDER BY ended)
FROM auction
GROUP BY ended
ORDER BY ended


/*
10. For each end day, show the following columns:

ended.
the sum of views from auctions that ended on that day.
the sum of views from the previous day (name the column previous_day.
delta – the difference between the sum of views on that day and on the previous day (name the column delta).
*/

SELECT
  ended,
  SUM(views),
  LAG(SUM(views)) OVER(ORDER BY ended) AS previous_day,
  SUM(views) - LAG(SUM(views)) OVER(ORDER BY ended) AS delta
FROM auction
GROUP BY ended


/*
11. 
*/



/*
12. 
*/



/*
13. 
*/



/*
14. 
*/



/*
15. 
*/



/*
16. 
*/



/*
17. 
*/



/*
18. 
*/



/*
19. 
*/



/*
20. 
*/



/*
21. 
*/



/*
22. 
*/



/*
23. 
*/



/*
24. 
*/



/*
25. 
*/



